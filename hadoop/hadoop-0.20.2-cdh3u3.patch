diff --git a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
index 14fca03..685afe4 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
@@ -3487,4 +3487,8 @@ public class JobInProgress {
     LOG.info("jobToken generated and stored with users keys in "
         + keysFile.toUri().getPath());
   }
+
+  int getMaxCacheLevel() {
+    return maxLevel;
+  }
 }
diff --git a/src/mapred/org/apache/hadoop/mapred/Task.java b/src/mapred/org/apache/hadoop/mapred/Task.java
index 2d8a2ef..ee57c71 100644
--- a/src/mapred/org/apache/hadoop/mapred/Task.java
+++ b/src/mapred/org/apache/hadoop/mapred/Task.java
@@ -161,6 +161,7 @@ abstract public class Task implements Writable, Configurable {
   private int numSlotsRequired;
   protected SecretKey tokenSecret;
   protected JvmContext jvmContext;
+  protected String extraData = "";
 
   ////////////////////////////////////////////
   // Constructors
@@ -423,6 +424,7 @@ abstract public class Task implements Writable, Configurable {
     out.writeBoolean(writeSkipRecs);
     out.writeBoolean(taskCleanup); 
     Text.writeString(out, user);
+    Text.writeString(out, extraData);
   }
   
   public void readFields(DataInput in) throws IOException {
@@ -447,6 +449,7 @@ abstract public class Task implements Writable, Configurable {
       setPhase(TaskStatus.Phase.CLEANUP);
     }
     user = Text.readString(in);
+    extraData = Text.readString(in);
   }
 
   @Override
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
index 8925eba..d68a8bc 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
@@ -207,9 +207,14 @@ abstract class TaskRunner extends Thread {
       File[] logFiles = prepareLogFiles(taskid, t.isTaskCleanupTask());
       File stdout = logFiles[0];
       File stderr = logFiles[1];
-      tracker.getTaskTrackerInstrumentation().reportTaskLaunch(taskid, stdout,
-                 stderr);
-      
+      //tracker.getTaskTrackerInstrumentation().reportTaskLaunch(taskid, stdout,
+      //           stderr);
+      List<TaskTrackerInstrumentation> ttInstrumentations =
+       tracker.getTaskTrackerInstrumentations();
+      for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+       inst.reportTaskLaunch(taskid, stdout, stderr);
+      }
+
       Map<String, String> env = new HashMap<String, String>();
       errorInfo = getVMEnvironment(errorInfo, workDir, conf, env, taskid,
                                    logSize);
@@ -220,11 +225,18 @@ abstract class TaskRunner extends Thread {
       setupCmds.add(setup);
       
       launchJvmAndWait(setupCmds, vargs, stdout, stderr, logSize, workDir);
-      tracker.getTaskTrackerInstrumentation().reportTaskEnd(t.getTaskID());
+      //tracker.getTaskTrackerInstrumentation().reportTaskEnd(t.getTaskID());
+      for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+       inst.reportTaskEnd(t.getTaskID());
+      }
+
       if (exitCodeSet) {
         if (!killed && exitCode != 0) {
           if (exitCode == 65) {
-            tracker.getTaskTrackerInstrumentation().taskFailedPing(t.getTaskID());
+            //tracker.getTaskTrackerInstrumentation().taskFailedPing(t.getTaskID());
+           for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+             inst.taskFailedPing(t.getTaskID());
+           }
           }
           throw new IOException("Task process exit with nonzero status of " +
               exitCode + ".");
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index a5ba0f5..cc8a606 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -507,11 +507,18 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
   
   
     
-  private TaskTrackerInstrumentation myInstrumentation = null;
+  //private TaskTrackerInstrumentation myInstrumentation = null;
+  private List<TaskTrackerInstrumentation> instrumentations =
+    new ArrayList<TaskTrackerInstrumentation>();
 
-  public TaskTrackerInstrumentation getTaskTrackerInstrumentation() {
-    return myInstrumentation;
+
+  //public TaskTrackerInstrumentation getTaskTrackerInstrumentation() {
+  //  return myInstrumentation;
+  //}
+  public List<TaskTrackerInstrumentation> getTaskTrackerInstrumentations() {
+    return instrumentations;
   }
+
   
   /**
    * A list of tips that should be cleaned up.
@@ -879,18 +886,30 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     //tweak the probe sample size (make it a function of numCopiers)
     probe_sample_size = this.fConf.getInt("mapred.tasktracker.events.batchsize", 500);
     
+    Class<?>[] instrumentationClasses = getInstrumentationClasses(fConf);
     try {
-      Class<? extends TaskTrackerInstrumentation> metricsInst = getInstrumentationClass(fConf);
-      java.lang.reflect.Constructor<? extends TaskTrackerInstrumentation> c =
-        metricsInst.getConstructor(new Class[] {TaskTracker.class} );
-      this.myInstrumentation = c.newInstance(this);
+      //Class<? extends TaskTrackerInstrumentation> metricsInst = getInstrumentationClass(fConf);
+      //java.lang.reflect.Constructor<? extends TaskTrackerInstrumentation> c =
+      //  metricsInst.getConstructor(new Class[] {TaskTracker.class} );
+      //this.myInstrumentation = c.newInstance(this);
+      for (Class<?> cls: instrumentationClasses) {
+       java.lang.reflect.Constructor<?> c =
+         cls.getConstructor(new Class[] {TaskTracker.class} );
+       TaskTrackerInstrumentation inst =
+         (TaskTrackerInstrumentation) c.newInstance(this);
+       instrumentations.add(inst);
+      }
+
     } catch(Exception e) {
       //Reflection can throw lots of exceptions -- handle them all by 
       //falling back on the default.
       LOG.error(
         "Failed to initialize taskTracker metrics. Falling back to default.",
         e);
-      this.myInstrumentation = new TaskTrackerMetricsInst(this);
+      //this.myInstrumentation = new TaskTrackerMetricsInst(this);
+      instrumentations.clear();
+      //instrumentations.add(TaskTrackerInstrumentation.create(this));
+      instrumentations.add(new TaskTrackerMetricsInst(this));
     }
     
     // bind address
@@ -1014,11 +1033,18 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     return fConf.getBoolean(JobConf.MR_ACLS_ENABLED, false);
   }
 
+  /*
   public static Class<? extends TaskTrackerInstrumentation> getInstrumentationClass(
     Configuration conf) {
     return conf.getClass("mapred.tasktracker.instrumentation",
         TaskTrackerMetricsInst.class, TaskTrackerInstrumentation.class);
   }
+  */
+
+  public static Class<?>[] getInstrumentationClasses(Configuration conf) {
+    return conf.getClasses("mapred.tasktracker.instrumentation",
+                          TaskTrackerInstrumentation.class);
+  }
 
   public static void setInstrumentationClass(
     Configuration conf, Class<? extends TaskTrackerInstrumentation> t) {
@@ -1988,7 +2014,10 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
             reduceTotal--;
           }
           try {
-            myInstrumentation.completeTask(taskStatus.getTaskID());
+            //myInstrumentation.completeTask(taskStatus.getTaskID());
+            for (TaskTrackerInstrumentation inst: instrumentations) {
+              inst.completeTask(taskStatus.getTaskID());
+            }
           } catch (MetricsException me) {
             LOG.warn("Caught: " + StringUtils.stringifyException(me));
           }
@@ -2153,7 +2182,10 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
           LOG.info(tip.getTask().getTaskID() + ": " + msg);
           ReflectionUtils.logThreadInfo(LOG, "lost task", 30);
           tip.reportDiagnosticInfo(msg);
-          myInstrumentation.timedoutTask(tip.getTask().getTaskID());
+          //myInstrumentation.timedoutTask(tip.getTask().getTaskID());
+          for (TaskTrackerInstrumentation inst: instrumentations) {
+            inst.timedoutTask(tip.getTask().getTaskID());
+          }
           purgeTask(tip, true);
         }
       }
@@ -2259,6 +2291,15 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       if (tip.getTask().isMapTask()) {
         indexCache.removeMap(tip.getTask().getTaskID().toString());
       }
+      // Report the task as killed to Instrumentation objects
+      TaskStatus status = (TaskStatus) tip.getStatus().clone();
+      TaskStatus.State state =
+        (wasFailure ? TaskStatus.State.FAILED : TaskStatus.State.KILLED);
+      status.setRunState(state);
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(tip.getTask(), status);
+      }
+
     }
   }
 
@@ -2916,6 +2957,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       LOG.info("Task " + task.getTaskID() + " is done.");
       LOG.info("reported output size for " + task.getTaskID() +  "  was " + taskStatus.getOutputSize());
 
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
     }
     
     public boolean wasKilled() {
@@ -3120,6 +3164,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       } catch (IOException ie) {
       }
 
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
     }
     
 
@@ -3258,6 +3305,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       taskStatus.setFinishTime(System.currentTimeMillis());
       removeFromMemoryManager(task.getTaskID());
       releaseSlot();
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
       notifyTTAboutTaskCompletion();
     }
     
@@ -3290,6 +3340,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
                              failure);
         runningTasks.put(task.getTaskID(), this);
         mapTotal++;
+        for (TaskTrackerInstrumentation inst: instrumentations) {
+          inst.statusUpdate(task, taskStatus);
+        }
       } else {
         LOG.warn("Output already reported lost:"+task.getTaskID());
       }
@@ -3473,6 +3526,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
         return false;
       }
       tip.reportProgress(taskStatus);
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(tip.getTask(), taskStatus);
+      }
       return true;
     } else {
       LOG.warn("Progress from unknown child task: "+taskid);
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java b/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
index e9e863f..20ecc67 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
@@ -62,4 +62,11 @@ class TaskTrackerInstrumentation  {
    */
   public void reportTaskEnd(TaskAttemptID t) {}
    
+  /**
+   * Called when a task changes status.
+   * @param task the task whose status changed
+   * @param taskStatus the new status of the task
+   */
+  public void statusUpdate(Task task, TaskStatus taskStatus) {}
+
 }
