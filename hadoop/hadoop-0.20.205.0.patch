diff --git a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
index 5dfbe88..9bd5769 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobInProgress.java
@@ -3556,4 +3556,8 @@ public class JobInProgress {
     }
     return level;
   }
+
+  int getMaxCacheLevel() {
+    return maxLevel;
+  }
 }
diff --git a/src/mapred/org/apache/hadoop/mapred/Task.java b/src/mapred/org/apache/hadoop/mapred/Task.java
index 08a56a4..80fa25b 100644
--- a/src/mapred/org/apache/hadoop/mapred/Task.java
+++ b/src/mapred/org/apache/hadoop/mapred/Task.java
@@ -165,6 +165,7 @@ abstract public class Task implements Writable, Configurable {
   protected TaskUmbilicalProtocol umbilical;
   protected SecretKey tokenSecret;
   protected JvmContext jvmContext;
+  protected String extraData = "";
 
   ////////////////////////////////////////////
   // Constructors
@@ -427,6 +428,7 @@ abstract public class Task implements Writable, Configurable {
     out.writeBoolean(writeSkipRecs);
     out.writeBoolean(taskCleanup); 
     Text.writeString(out, user);
+    Text.writeString(out, extraData);
   }
   
   public void readFields(DataInput in) throws IOException {
@@ -451,6 +453,7 @@ abstract public class Task implements Writable, Configurable {
       setPhase(TaskStatus.Phase.CLEANUP);
     }
     user = Text.readString(in);
+    extraData = Text.readString(in);
   }
 
   @Override
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
index ca54508..92ae18b 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskRunner.java
@@ -228,9 +228,12 @@ abstract class TaskRunner extends Thread {
       File[] logFiles = prepareLogFiles(taskid, t.isTaskCleanupTask());
       File stdout = logFiles[0];
       File stderr = logFiles[1];
-      tracker.getTaskTrackerInstrumentation().reportTaskLaunch(taskid, stdout,
-                 stderr);
-      
+      List<TaskTrackerInstrumentation> ttInstrumentations =
+	tracker.getTaskTrackerInstrumentations();
+      for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+	inst.reportTaskLaunch(taskid, stdout, stderr);
+      }
+
       Map<String, String> env = new HashMap<String, String>();
       errorInfo = getVMEnvironment(errorInfo, user, workDir, conf, env, taskid,
                                    logSize);
@@ -249,11 +252,15 @@ abstract class TaskRunner extends Thread {
       setupCmds.add(setup);
       
       launchJvmAndWait(setupCmds, vargs, stdout, stderr, logSize, workDir);
-      tracker.getTaskTrackerInstrumentation().reportTaskEnd(t.getTaskID());
+      for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+	inst.reportTaskEnd(t.getTaskID());
+      }
       if (exitCodeSet) {
         if (!killed && exitCode != 0) {
           if (exitCode == 65) {
-            tracker.getTaskTrackerInstrumentation().taskFailedPing(t.getTaskID());
+	    for (TaskTrackerInstrumentation inst: ttInstrumentations) {
+	      inst.taskFailedPing(t.getTaskID());
+	    }
           }
           throw new IOException("Task process exit with nonzero status of " +
               exitCode + ".");
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
index 76d2f5f..5f43c40 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTracker.java
@@ -399,10 +399,11 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
 
   private ShuffleServerInstrumentation shuffleServerMetrics;
 
-  private TaskTrackerInstrumentation myInstrumentation = null;
+  private List<TaskTrackerInstrumentation> instrumentations =
+    new ArrayList<TaskTrackerInstrumentation>();
 
-  public TaskTrackerInstrumentation getTaskTrackerInstrumentation() {
-    return myInstrumentation;
+  public List<TaskTrackerInstrumentation> getTaskTrackerInstrumentations() {
+    return instrumentations;
   }
   
   /**
@@ -836,22 +837,22 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
   }
 
   private void createInstrumentation() {
-    Class<? extends TaskTrackerInstrumentation> metricsInst =
-        getInstrumentationClass(fConf);
-    LOG.debug("instrumentation class="+ metricsInst);
-    if (metricsInst == null) {
-      myInstrumentation = TaskTrackerInstrumentation.create(this);
-      return;
-    }
+    Class<?>[] instrumentationClasses = getInstrumentationClasses(fConf);
+
     try {
-      java.lang.reflect.Constructor<? extends TaskTrackerInstrumentation> c =
-        metricsInst.getConstructor(new Class<?>[] {TaskTracker.class} );
-      this.myInstrumentation = c.newInstance(this);
+      for (Class<?> cls: instrumentationClasses) {
+	java.lang.reflect.Constructor<?> c =
+	  cls.getConstructor(new Class[] {TaskTracker.class} );
+	TaskTrackerInstrumentation inst =
+	  (TaskTrackerInstrumentation) c.newInstance(this);
+	instrumentations.add(inst);
+      }
     } catch(Exception e) {
       //Reflection can throw lots of exceptions -- handle them all by
       //falling back on the default.
       LOG.error("failed to initialize taskTracker metrics", e);
-      this.myInstrumentation = TaskTrackerInstrumentation.create(this);
+      instrumentations.clear();
+      instrumentations.add(TaskTrackerInstrumentation.create(this));
     }
 
   }
@@ -867,10 +868,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
     return fConf.getBoolean(JobConf.MR_ACLS_ENABLED, false);
   }
 
-  static Class<? extends TaskTrackerInstrumentation> getInstrumentationClass(
-    Configuration conf) {
-    return conf.getClass("mapred.tasktracker.instrumentation", null,
-                         TaskTrackerInstrumentation.class);
+  public static Class<?>[] getInstrumentationClasses(Configuration conf) {
+    return conf.getClasses("mapred.tasktracker.instrumentation",
+			   TaskTrackerInstrumentation.class);
   }
 
   static void setInstrumentationClass(
@@ -1807,7 +1807,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
           } else {
             reduceTotal--;
           }
-          myInstrumentation.completeTask(taskStatus.getTaskID());
+	  for (TaskTrackerInstrumentation inst: instrumentations) {
+	    inst.completeTask(taskStatus.getTaskID());
+	  }
           runningTasks.remove(taskStatus.getTaskID());
         }
       }
@@ -1969,7 +1971,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
           LOG.info(tip.getTask().getTaskID() + ": " + msg);
           ReflectionUtils.logThreadInfo(LOG, "lost task", 30);
           tip.reportDiagnosticInfo(msg);
-          myInstrumentation.timedoutTask(tip.getTask().getTaskID());
+          for (TaskTrackerInstrumentation inst: instrumentations) {
+            inst.timedoutTask(tip.getTask().getTaskID());
+          }
           purgeTask(tip, true);
         }
       }
@@ -2074,6 +2078,14 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       if (tip.getTask().isMapTask()) {
         indexCache.removeMap(tip.getTask().getTaskID().toString());
       }
+      // Report the task as killed to Instrumentation objects
+      TaskStatus status = (TaskStatus) tip.getStatus().clone();
+      TaskStatus.State state =
+        (wasFailure ? TaskStatus.State.FAILED : TaskStatus.State.KILLED);
+      status.setRunState(state);
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(tip.getTask(), status);
+      }
     }
   }
 
@@ -2730,7 +2742,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       runner.signalDone();
       LOG.info("Task " + task.getTaskID() + " is done.");
       LOG.info("reported output size for " + task.getTaskID() +  "  was " + taskStatus.getOutputSize());
-
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
     }
     
     public boolean wasKilled() {
@@ -2935,6 +2949,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       } catch (IOException ie) {
       }
 
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
     }
     
 
@@ -3073,6 +3090,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
       taskStatus.setFinishTime(System.currentTimeMillis());
       removeFromMemoryManager(task.getTaskID());
       releaseSlot();
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(task, taskStatus);
+      }
       notifyTTAboutTaskCompletion();
     }
     
@@ -3105,6 +3125,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
                              failure);
         runningTasks.put(task.getTaskID(), this);
         mapTotal++;
+        for (TaskTrackerInstrumentation inst: instrumentations) {
+          inst.statusUpdate(task, taskStatus);
+        }
       } else {
         LOG.warn("Output already reported lost:"+task.getTaskID());
       }
@@ -3282,6 +3305,9 @@ public class TaskTracker implements MRConstants, TaskUmbilicalProtocol,
         return false;
       }
       tip.reportProgress(taskStatus);
+      for (TaskTrackerInstrumentation inst: instrumentations) {
+        inst.statusUpdate(tip.getTask(), taskStatus);
+      }
       return true;
     } else {
       LOG.warn("Progress from unknown child task: "+taskid);
diff --git a/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java b/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
index 2d1543f..33d7502 100644
--- a/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
+++ b/src/mapred/org/apache/hadoop/mapred/TaskTrackerInstrumentation.java
@@ -64,6 +64,13 @@ class TaskTrackerInstrumentation  {
    */
   public void reportTaskEnd(TaskAttemptID t) {}
 
+  /**
+   * Called when a task changes status.
+   * @param task the task whose status changed
+   * @param taskStatus the new status of the task
+   */
+  public void statusUpdate(Task task, TaskStatus taskStatus) {}
+
   static TaskTrackerInstrumentation create(TaskTracker tt) {
     return create(tt, DefaultMetricsSystem.INSTANCE);
   }
